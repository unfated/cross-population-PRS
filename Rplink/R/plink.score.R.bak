plink.score <- function(coefs, 
                        score.options="", 
                        q.score.range=NULL,
                        q.score.range.data=NULL,
                        q.score.range.options="",
                        p.vals=T, 
                        ...) {
  ### FUnction to call plink --score with coefs as weights
  ### Optionally can apply p-values cut-offs using Plink's
  ### --q-score-range option
  ### Specify q.score.range as a range of cut-offs, 
  ### e.g.: c(0, 0.00001, 0.0001, 0.01, 0.1, 1)
  ### p.vals: Indicate that the cut-offs are p-values
  ###         If they're not, then specify q.score.range in 
  ###         in two or three columns. (Only last two columns will 
  ###         be used.) See plink manual.  
  ### ...: options passed to plink()
  
  stopifnot(is.vector(coefs) & is.numeric(coefs))
  other.options <- list(...)
  if(is.null(other.options$bfile)) 
    bimfile <- get(".bim", envir=.GlobalEnv, inherits=F)
  else bimfile <- paste0(other.options$bfile, ".bim")
  
  bim <- read.table(bimfile, stringsAsFactors=F)
  stopifnot(nrow(bim) == length(coefs))
  bim <- cbind(bim, coefs)
  write.table2(bim, file=coefsfile <- tempfile(pattern="coefs"))
  columns <- ifelse(grepl("^[0-9]+\\s[0-9]*\\s*[0-9]*\\s*",score.options), 
                    "", "2 5 7")
  options <- paste("--score", coefsfile, columns, score.options)
  other.options$cmd <- paste(other.options$cmd, options)
  
  ## q-score-range
  if(!is.null(q.score.range)) {
    if(p.vals) {
      cutoffs <- q.score.range
      stopifnot(all(cutoffs >= 0 & cutoffs <= 1))
      cutoffs <- cutoffs[cutoffs > 0]
      n.cutoffs <- length(cutoffs)
      matrix <- matrix(0, nrow=n.cutoffs, ncol=3)
      matrix[,1] <- 1:n.cutoffs
      matrix[,2] <- 0
      matrix[,3] <- cutoffs
      
    }
    else {
      stopifnot(length(dim(q.score.range)) == 2)
      if(ncol(q.score.range) == 2) {
        matrix <- cbind(1:nrow(q.score.range), q.score.range)
      }
      else {
        matrix <- q.score.range
        matrix[,1] <- 1:nrow(q.score.range)
      }
    }
    write.table2(matrix, file=qfile <- tempfile(pattern="q"))
    
    ## Data file
    if(is.character(q.score.range.data) && length(q.score.range.data) == 1) {
      ## A file is given
      qdata <- q.score.range.data
    }
    else if(is.vector(q.score.range.data)) {
      stopifnot(nrow(bim) == length(q.score.range.data))
      write.table2(cbind(bim$V2, q.score.range.data), 
                  file=qdata <- tempfile(pattern="qdata"))
    }
    else {
      stop("I don''t know what to do with this q.score.range.data input.")
    }
    
    options <- paste("--q-score-range", qfile, qdata, q.score.range.options)
    other.options$cmd <- paste(other.options$cmd, options)
    
  }
  
  #### run plink ####
  if(!is.null(other.options$test)) return(do.call(plink, other.options))
  
  outfile <- do.call(plink, other.options)
  
  ### Read in table ###
  if(is.null(q.score.range)) {
    table <- read.table.plink(outfile, ".profile")
    if(attributes(table)$table.exists) {
      attr(table, "notes") <- attributes(outfile)
      return(table)
    }
    else {
      warning(attributes(outfile)$log)
      return(outfile)
    }
  }
  else {
    new.table <- T
    toreturn <- NULL
    for(i in 1:length(cutoffs)) {
      table <- read.table.plink(outfile, paste0(".", i, ".profile"))
      
      if(attributes(table)$table.exists) {
        if(new.table) {
          toreturn <- table
          new.table <- F
        }
        else {
          toreturn <- cbind(toreturn, table[,ncol(table)])
        }
        colnames(toreturn)[ncol(toreturn)] <- paste0("SCORE", i)
      }
      else warning(attributes(outfile)$log)

    }
    attr(toreturn, "notes") <- attributes(outfile)
    return(toreturn)
  }
  
}